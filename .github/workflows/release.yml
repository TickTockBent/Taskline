name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Verify everything before releasing
  verify:
    name: Pre-Release Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
            exit 1
          fi
          echo "Version verified: $CARGO_VERSION"

      - name: Run full test suite
        run: cargo test --all-features --verbose

      - name: Run doc tests
        run: cargo test --doc --all-features

      - name: Build release
        run: cargo build --release --all-features

      - name: Check documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: verify
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          name: Release v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    needs: [verify, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build and deploy documentation
  deploy-docs:
    name: Deploy Documentation
    needs: publish-crate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --all-features --no-deps

      - name: Add index.html redirect
        run: |
          echo '<meta http-equiv="refresh" content="0; url=taskline">' > target/doc/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  # Announce release
  announce:
    name: Announce Release
    needs: [create-release, publish-crate, deploy-docs]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Send notification
        run: |
          echo "âœ… Release v${{ needs.create-release.outputs.version }} published successfully!"
          echo "- GitHub Release: Created"
          echo "- crates.io: Published"
          echo "- Documentation: Deployed"
